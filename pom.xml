<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.sonatype.oss</groupId>
		<artifactId>oss-parent</artifactId>
		<version>7</version>
	</parent>

	<groupId>org.asciidoctor</groupId>
	<artifactId>asciidoctor-java-integration</artifactId>
	<version>0.1.4-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>asciidoctor-java-integration</name>
	<description>asciidoctor-java-integration is a java binding to Asciidoctor gem.</description>
	<url>https://github.com/asciidoctor/asciidoctor-java-integration</url>
	<issueManagement>
		<system>github</system>
		<url>https://github.com/asciidoctor/asciidoctor-java-integration/issues</url>
	</issueManagement>
	<licenses>
		<license>
			<name>Apache License Version 2.0</name>
		</license>
	</licenses>

	<scm>
		<connection>scm:git:git@github.com:asciidoctor/asciidoctor-java-integration.git</connection>
		<developerConnection>scm:git:git@github.com:asciidoctor/asciidoctor-java-integration.git</developerConnection>
		<url>scm:git:git@github.com:asciidoctor/asciidoctor-java-integration.git</url>
	</scm>

	<developers>
		<developer>
			<id>asotobu</id>
			<name>Alex Soto Bueno</name>
			<email>asotobu@gmail.com</email>
		</developer>
	</developers>

	<properties>
		<project.build.scriptSourceDirectory>src/main/scripts/</project.build.scriptSourceDirectory>
		<project.buildDirectory>src/main/build</project.buildDirectory>
		<jruby.version>1.7.4</jruby.version>
		<junit.version>4.11</junit.version>
		<jsoup.version>1.7.2</jsoup.version>
		<xmlmatchers.version>1.0-RC1</xmlmatchers.version>
		<hamcrest.version>1.3</hamcrest.version>
		<guava.version>14.0.1</guava.version>
		<haml.version>4.0.3</haml.version>
		<tilt.version>1.3.4</tilt.version>
		<coderay.version>1.0.8</coderay.version>
		<asciidoctor.version>0.1.3</asciidoctor.version>
		<erubis.version>2.7.0</erubis.version>
		<slim.version>1.3.6</slim.version>
		<jcommander.version>1.30</jcommander.version>
		<gem.home.directory>classes</gem.home.directory>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.jruby</groupId>
			<artifactId>jruby-complete</artifactId>
			<version>${jruby.version}</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.xmlmatchers</groupId>
			<artifactId>xml-matchers</artifactId>
			<version>${xmlmatchers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<version>${hamcrest.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>${jsoup.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>rubygems</groupId>
			<artifactId>haml</artifactId>
			<version>${haml.version}</version>
			<type>gem</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>rubygems</groupId>
			<artifactId>asciidoctor</artifactId>
			<version>${asciidoctor.version}</version>
			<type>gem</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>rubygems</groupId>
			<artifactId>coderay</artifactId>
			<version>${coderay.version}</version>
			<type>gem</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>rubygems</groupId>
			<artifactId>tilt</artifactId>
			<version>${tilt.version}</version>
			<type>gem</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>rubygems</groupId>
			<artifactId>erubis</artifactId>
			<version>${erubis.version}</version>
			<type>gem</type>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>rubygems</groupId>
			<artifactId>slim</artifactId>
			<version>${slim.version}</version>
			<type>gem</type>
			<scope>provided</scope>
		</dependency>

		<!-- Dependencies for running AJI as standalone application -->
		<dependency>
			<groupId>com.beust</groupId>
			<artifactId>jcommander</artifactId>
			<version>${jcommander.version}</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>org.asciidoctor.cli.AsciidoctorInvoker</mainClass>
							<addClasspath>true</addClasspath>
							<classpathPrefix>libs</classpathPrefix>
						</manifest>
						<manifestEntries>
							<Implementation-Version>${project.version}</Implementation-Version>
							<compilation>${maven.build.timestamp}</compilation>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.12</version>
				<configuration>
					<skip>false</skip>
				</configuration>
				<executions>
					<execution>
						<id>unit-tests</id>
						<phase>test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<!-- <skip>false</skip> -->
							<includes>
								<include>**/*Test.java</include>
								<include>**/Test*.java</include>
								<include>**/When*.java</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<descriptors>
						<descriptor>src/main/assembly/default.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>assembly</id>
						<phase>install</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>de.saumya.mojo</groupId>
				<artifactId>gem-maven-plugin</artifactId>
				<version>0.29.4</version>
				<configuration>
					<jrubyVersion>${jruby.version}</jrubyVersion>
					<gemHome>${project.build.directory}/${gem.home.directory}</gemHome>
					<gemPath>${project.build.directory}/${gem.home.directory}</gemPath>
				</configuration>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>initialize</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>current-asciidoctor</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.gmaven</groupId>
						<artifactId>gmaven-plugin</artifactId>
						<version>1.5</version>
						<executions>
							<execution>
								<!-- Executed after gem-maven-plugin so  -->
								<phase>generate-resources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<scriptpath>
										<element>${basedir}/${project.buildDirectory}</element>
									</scriptpath>
									<source>
									<![CDATA[
										
										class FileBinaryOperatorOverload {

    										def static leftShift(File file, URL url){
        										url.withInputStream {is->
            										file.withOutputStream {os->
                										def bs = new BufferedOutputStream( os )
                										bs << is
            											}
        											}
    											}
										}
										
										class GemInstaller {
											
											def project;
											def ant;
										
											def installGem(def downloadUrl, def gemName, def gemVersion) {
												def downloadedProjectArtifact = downloadGem(downloadUrl, gemName)
												def destinationDirectory = unzipGem(downloadedProjectArtifact)
												def currentGemDirectory = installGemToGemHome(destinationDirectory, gemName, gemVersion)
												moveSpecificationFile(destinationDirectory, currentGemDirectory, gemName, gemVersion)
												clean(downloadedProjectArtifact)
											}
										
											def downloadGem(def downloadUrl, def gemName) {
												
												final def outputDirectory = project.build.directory

    											def downloadedProjectArtifact = new File(outputDirectory, gemName+".zip")

									    		use (FileBinaryOperatorOverload)
									    		{
									        		downloadedProjectArtifact << downloadUrl.toURL()
									    		}
											
												return downloadedProjectArtifact;
											}
											
											def unzipGem(def downloadedProjectArtifact) {
												final def outputDirectory = project.build.directory
												
												File destinationDirectory = new File(outputDirectory)
									    		ant.unzip(src: downloadedProjectArtifact, dest: destinationDirectory)
									    		
									    		return destinationDirectory
											}
											
											def installGemToGemHome(def destinationDirectory, def gemName, def gemVersion) {
												
												File extractedDirectory = new File(destinationDirectory, gemName+"-master");
									    
									    		//we delete previous gem and we overwrite them with same version (no snapshot version information is provided in gem)
									    		File currentGemDirectory = new File(destinationDirectory, "classes/gems/"+gemName+"-"+ gemVersion)
									   			ant.delete(dir: currentGemDirectory)
										
												ant.move(file: extractedDirectory, tofile: currentGemDirectory)
											
												return currentGemDirectory
											}
											
											def moveSpecificationFile(def destinationDirectory, def currentGemDirectory, def gemName, def gemVersion) {
												File specificationDirectory = new File(destinationDirectory, "classes/specifications");
												File specificationFile = new File(specificationDirectory, gemName+"-"+ gemVersion+".gemspec")
												ant.delete(file: specificationFile)
										
												File extractedGemSpec = new File(currentGemDirectory, gemName+".gemspec")
												ant.copy(file: extractedGemSpec, tofile: specificationFile)
											}
											
											def clean(def downloadedProjectArtifact) {
												ant.delete(file: downloadedProjectArtifact)
											}
										}
										
										GemInstaller gemInstaller = new GemInstaller(project: project, ant:ant)
										gemInstaller.installGem("https://github.com/asciidoctor/asciidoctor/archive/master.zip", "asciidoctor", project.properties["asciidoctor.version"])
										
									    ]]>
									</source>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<repositories>
		<repository>
			<id>rubygems-release</id>
			<url>http://rubygems-proxy.torquebox.org/releases</url>
		</repository>
		<repository>
			<id>rubygems-prerelease</id>
			<url>http://rubygems-proxy.torquebox.org/prereleases</url>
		</repository>
	</repositories>
</project>
