plugins {
  id 'com.github.jruby-gradle.base' version '0.1.9'
  // TODO enable com.github.jruby-grade.jar plugin once we can match current functionality
  //id 'com.github.jruby-gradle.jar' version '0.1.3'
  id 'nebula.nebula-publishing' version '2.0.0'
  id 'com.jfrog.bintray' version '1.0'
}

status = project.hasProperty('publishRelease') && project.publishRelease.toBoolean() ?
    'release' : ((version == 'unspecified' || version.endsWith('-SNAPSHOT')) ? 'snapshot' : 'release')

ext {
  buildDateTime = new Date()
  (buildDateOnly, buildTimeOnly) = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSSZ').format(buildDateTime).split(' ')
  statusIsRelease = (status == 'release')
}

allprojects {
  group = 'org.asciidoctor'
  defaultTasks 'check'
}

subprojects {
  ext {
    // jar versions
    guavaVersion = '18.0'
    hamcrestVersion = '1.3'
    jcommanderVersion = '1.35'
    jrubyVersion = '1.7.16.1'
    jsoupVersion = '1.8.1'
    junitVersion = '4.12'
    saxonVersion = '9.5.1-6'
    slf4jVersion = '1.7.7'
    xmlMatchersVersion = '1.0-RC1'

    // gem versions
    asciidoctorGemVersion = project.hasProperty('asciidoctorGemVersion') ? project.asciidoctorGemVersion : '1.5.2'
    asciidoctorEpub3GemVersion = project(':asciidoctorj-epub3').version.replace('-', '.')
    asciidoctorPdfGemVersion = project(':asciidoctorj-pdf').version.replace('-', '.')
    coderayGemVersion = '1.1.0'
    erubisGemVersion = '2.7.0'
    hamlGemVersion = '4.0.5'
    openUriCachedGemVersion = '0.0.5'
    prawnGemVersion = '1.2.1'
    slimGemVersion = '2.0.3'
    threadSafeGemVersion = '0.3.4'
    tiltGemVersion = '2.0.1'
    ttfunkGemVersion = '1.2.2'
  }

  //apply plugin: 'project-reports'

  // NOTE applying Java plugin changes the status; take steps to preserve value
  def _status = status
  apply plugin: 'java'
  status = _status

  // NOTE ignore the following warning when you are not using jdk6; it's harmless
  // "warning: [options] bootstrap class path not set in conjunction with -source 1.6"
  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  repositories {
    if (project.hasProperty('useMavenLocal') && useMavenLocal.toBoolean()) {
      mavenLocal()
    }
    // QUESTION can we switch to jcenter() only?
    mavenCentral()
    maven {
      name 'rubygems-release'
      url 'http://rubygems-proxy.torquebox.org/releases'
    }
    maven {
      name 'rubygems-prerelease'
      url 'http://rubygems-proxy.torquebox.org/prereleases'
    }
  }

  configurations {
    dists
  }

  dependencies {
    testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
    testCompile "junit:junit:$junitVersion"
    testRuntime "org.slf4j:slf4j-simple:$slf4Version"
  }

  test {
    forkEvery = 3
    minHeapSize = '128m'
    maxHeapSize = '512m'
    if (JavaVersion.current().isJava8Compatible()) {
      jvmArgs '-XX:-UseGCOverheadLimit'
    }
    else {
      jvmArgs '-XX:MaxPermSize=256m', '-XX:-UseGCOverheadLimit'
    }
  }

  if (JavaVersion.current().isJava8Compatible()) {
    javadoc {
      // Oracle JDK8 likes to fail the build over spoiled HTML
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier 'sources'
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier 'javadoc'
  }

  if (project.name == 'asciidoctorj-distribution') {
    // we're creating a dist, not a jar, silly Gradle
    jar.enabled = false
    configurations.all { artifacts.clear() }
  }
  // skip the JRuby stuff for the distribution build
  else {
    apply plugin: 'com.github.jruby-gradle.base'
    //apply plugin: 'com.github.jruby-gradle.jar'

    // TODO I'd like to be able to customize the name of the gemInstallDir
    jruby {
      defaultRepositories = false
    }

    // QUESTION is this the right place to insert this task dependency in the lifecycle?
    processResources.dependsOn jrubyPrepareGems

    apply from: rootProject.file('gradle/eclipse.gradle')
    apply from: rootProject.file('gradle/idea.gradle')
  }
 
  if (project.name != 'asciidoctorj-distribution') {
    apply from: rootProject.file('gradle/publish.gradle')
  }

  apply from: rootProject.file('gradle/sign.gradle')
  apply from: rootProject.file('gradle/deploy.gradle')
}

apply from: 'gradle/idea.gradle'
